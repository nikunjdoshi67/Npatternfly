"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const React = tslib_1.__importStar(require("react"));
const NavVariants_1 = require("./NavVariants");
const nav_1 = tslib_1.__importDefault(require("@patternfly/react-styles/css/components/Nav/nav"));
const react_styles_1 = require("@patternfly/react-styles");
const angle_left_icon_1 = tslib_1.__importDefault(require("@patternfly/react-icons/dist/js/icons/angle-left-icon"));
const angle_right_icon_1 = tslib_1.__importDefault(require("@patternfly/react-icons/dist/js/icons/angle-right-icon"));
const util_1 = require("../../helpers/util");
const Nav_1 = require("./Nav");
class NavList extends React.Component {
    constructor() {
        super(...arguments);
        this.navList = React.createRef();
        this.handleScrollButtons = () => {
            if (this.navList.current) {
                const { updateScrollButtonState } = this.context;
                const container = this.navList.current;
                // get first element and check if it is in view
                const showLeftScrollButton = !util_1.isElementInView(container, container.firstChild, false);
                // get last element and check if it is in view
                const showRightScrollButton = !util_1.isElementInView(container, container.lastChild, false);
                updateScrollButtonState({
                    showLeftScrollButton,
                    showRightScrollButton
                });
            }
        };
        this.scrollLeft = () => {
            // find first Element that is fully in view on the left, then scroll to the element before it
            if (this.navList.current) {
                const container = this.navList.current;
                const childrenArr = Array.from(container.children);
                let firstElementInView;
                let lastElementOutOfView;
                for (let i = 0; i < childrenArr.length && !firstElementInView; i++) {
                    if (util_1.isElementInView(container, childrenArr[i], false)) {
                        firstElementInView = childrenArr[i];
                        lastElementOutOfView = childrenArr[i - 1];
                    }
                }
                if (lastElementOutOfView) {
                    container.scrollLeft -= lastElementOutOfView.scrollWidth;
                }
                this.handleScrollButtons();
            }
        };
        this.scrollRight = () => {
            // find last Element that is fully in view on the right, then scroll to the element after it
            if (this.navList.current) {
                const container = this.navList.current;
                const childrenArr = Array.from(container.children);
                let lastElementInView;
                let firstElementOutOfView;
                for (let i = childrenArr.length - 1; i >= 0 && !lastElementInView; i--) {
                    if (util_1.isElementInView(container, childrenArr[i], false)) {
                        lastElementInView = childrenArr[i];
                        firstElementOutOfView = childrenArr[i + 1];
                    }
                }
                if (firstElementOutOfView) {
                    container.scrollLeft += firstElementOutOfView.scrollWidth;
                }
                this.handleScrollButtons();
            }
        };
    }
    componentDidMount() {
        const { variant } = this.props;
        const isHorizontal = variant === NavVariants_1.NavVariants.horizontal || variant === NavVariants_1.NavVariants.tertiary;
        if (isHorizontal) {
            window.addEventListener('resize', this.handleScrollButtons, false);
            // call the handle resize function to check if scroll buttons should be shown
            this.handleScrollButtons();
        }
    }
    componentWillUnmount() {
        const { variant } = this.props;
        const isHorizontal = variant === NavVariants_1.NavVariants.horizontal || variant === NavVariants_1.NavVariants.tertiary;
        if (isHorizontal) {
            document.removeEventListener('resize', this.handleScrollButtons, false);
        }
    }
    render() {
        const _a = this.props, { variant, children, className, ariaLeftScroll, ariaRightScroll } = _a, props = tslib_1.__rest(_a, ["variant", "children", "className", "ariaLeftScroll", "ariaRightScroll"]);
        const variantStyle = {
            [NavVariants_1.NavVariants.default]: nav_1.default.navList,
            [NavVariants_1.NavVariants.simple]: nav_1.default.navSimpleList,
            [NavVariants_1.NavVariants.horizontal]: nav_1.default.navHorizontalList,
            [NavVariants_1.NavVariants.tertiary]: nav_1.default.navTertiaryList
        };
        const isHorizontal = variant === NavVariants_1.NavVariants.horizontal || variant === NavVariants_1.NavVariants.tertiary;
        return (React.createElement(React.Fragment, null,
            isHorizontal && (React.createElement("button", { className: react_styles_1.css(nav_1.default.navScrollButton), "aria-label": ariaLeftScroll, onClick: this.scrollLeft },
                React.createElement(angle_left_icon_1.default, null))),
            React.createElement("ul", Object.assign({ ref: this.navList, className: react_styles_1.css(variantStyle[variant], className) }, props), children),
            isHorizontal && (React.createElement("button", { className: react_styles_1.css(nav_1.default.navScrollButton), "aria-label": ariaRightScroll, onClick: this.scrollRight },
                React.createElement(angle_right_icon_1.default, null)))));
    }
}
exports.NavList = NavList;
NavList.contextType = Nav_1.NavContext;
NavList.defaultProps = {
    variant: 'default',
    children: null,
    className: '',
    ariaLeftScroll: 'Scroll left',
    ariaRightScroll: 'Scroll right'
};
//# sourceMappingURL=NavList.js.map