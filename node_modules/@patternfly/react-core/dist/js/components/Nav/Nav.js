"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const React = tslib_1.__importStar(require("react"));
const nav_1 = tslib_1.__importDefault(require("@patternfly/react-styles/css/components/Nav/nav"));
const react_styles_1 = require("@patternfly/react-styles");
const helpers_1 = require("../../helpers");
exports.NavContext = React.createContext({});
class Nav extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            showLeftScrollButton: false,
            showRightScrollButton: false
        };
        this.updateScrollButtonState = (state) => {
            const { showLeftScrollButton, showRightScrollButton } = state;
            this.setState({
                showLeftScrollButton,
                showRightScrollButton
            });
        };
    }
    // Callback from NavItem
    onSelect(event, groupId, itemId, to, preventDefault, onClick) {
        if (preventDefault) {
            event.preventDefault();
        }
        this.props.onSelect({ groupId, itemId, event, to });
        if (onClick) {
            onClick(event, itemId, groupId, to);
        }
    }
    // Callback from NavExpandable
    onToggle(event, groupId, toggleValue) {
        this.props.onToggle({
            event,
            groupId,
            isExpanded: toggleValue
        });
    }
    render() {
        const _a = this.props, { 'aria-label': ariaLabel, children, className, 
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        onSelect, 
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        onToggle, theme, ouiaId } = _a, props = tslib_1.__rest(_a, ['aria-label', "children", "className", "onSelect", "onToggle", "theme", "ouiaId"]);
        const { showLeftScrollButton, showRightScrollButton } = this.state;
        const childrenProps = children.props;
        return (React.createElement(exports.NavContext.Provider, { value: {
                onSelect: (event, groupId, itemId, to, preventDefault, onClick) => this.onSelect(event, groupId, itemId, to, preventDefault, onClick),
                onToggle: (event, groupId, expanded) => this.onToggle(event, groupId, expanded),
                updateScrollButtonState: this.updateScrollButtonState
            } },
            React.createElement("nav", Object.assign({ className: react_styles_1.css(nav_1.default.nav, theme === 'dark' && nav_1.default.modifiers.dark, showLeftScrollButton && nav_1.default.modifiers.start, showRightScrollButton && nav_1.default.modifiers.end, className), "aria-label": ariaLabel === ''
                    ? typeof childrenProps !== 'undefined' && childrenProps.variant === 'tertiary'
                        ? 'Local'
                        : 'Global'
                    : ariaLabel }, helpers_1.getOUIAProps('Nav', ouiaId), props), children)));
    }
}
exports.Nav = Nav;
Nav.defaultProps = {
    'aria-label': '',
    children: null,
    className: '',
    onSelect: () => undefined,
    onToggle: () => undefined,
    theme: 'light'
};
//# sourceMappingURL=Nav.js.map