"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const React = tslib_1.__importStar(require("react"));
const data_toolbar_1 = tslib_1.__importDefault(require("@patternfly/react-styles/css/components/DataToolbar/data-toolbar"));
const react_styles_1 = require("@patternfly/react-styles");
const DataToolbarUtils_1 = require("./DataToolbarUtils");
const DataToolbarChipGroupContent_1 = require("./DataToolbarChipGroupContent");
class DataToolbar extends React.Component {
    constructor(props) {
        super(props);
        this.chipGroupContentRef = React.createRef();
        this.isToggleManaged = () => !(this.props.isExpanded || !!this.props.toggleIsExpanded);
        this.toggleIsExpanded = () => {
            this.setState(prevState => ({
                isManagedToggleExpanded: !prevState.isManagedToggleExpanded
            }));
        };
        this.closeExpandableContent = () => {
            this.setState(() => ({
                isManagedToggleExpanded: false
            }));
        };
        this.updateNumberFilters = (categoryName, numberOfFilters) => {
            const filterInfoToUpdate = Object.assign({}, this.state.filterInfo);
            if (!filterInfoToUpdate.hasOwnProperty(categoryName) || filterInfoToUpdate[categoryName] !== numberOfFilters) {
                filterInfoToUpdate[categoryName] = numberOfFilters;
                this.setState({ filterInfo: filterInfoToUpdate });
            }
        };
        this.getNumberOfFilters = () => Object.values(this.state.filterInfo).reduce((acc, cur) => acc + cur, 0);
        this.state = {
            isManagedToggleExpanded: false,
            filterInfo: {}
        };
    }
    componentDidMount() {
        if (this.isToggleManaged()) {
            window.addEventListener('resize', this.closeExpandableContent);
        }
        if (process.env.NODE_ENV !== 'production' && !DataToolbar.hasWarnBeta) {
            // eslint-disable-next-line no-console
            console.warn('You are using a beta component (DataToolbar). These api parts are subject to change in the future.');
            DataToolbar.hasWarnBeta = true;
        }
    }
    componentWillUnmount() {
        if (this.isToggleManaged()) {
            window.removeEventListener('resize', this.closeExpandableContent);
        }
    }
    render() {
        const _a = this.props, { clearAllFilters, clearFiltersButtonText, collapseListedFiltersBreakpoint, isExpanded, toggleIsExpanded, className, children, id } = _a, props = tslib_1.__rest(_a, ["clearAllFilters", "clearFiltersButtonText", "collapseListedFiltersBreakpoint", "isExpanded", "toggleIsExpanded", "className", "children", "id"]);
        const { isManagedToggleExpanded } = this.state;
        const isToggleManaged = this.isToggleManaged();
        const numberOfFilters = this.getNumberOfFilters();
        const showClearFiltersButton = numberOfFilters > 0;
        return (React.createElement("div", Object.assign({ className: react_styles_1.css(data_toolbar_1.default.dataToolbar, className), id: id }, props),
            React.createElement(DataToolbarUtils_1.DataToolbarContext.Provider, { value: {
                    isExpanded: this.isToggleManaged() ? isManagedToggleExpanded : isExpanded,
                    toggleIsExpanded: isToggleManaged ? this.toggleIsExpanded : toggleIsExpanded,
                    chipGroupContentRef: this.chipGroupContentRef,
                    updateNumberFilters: this.updateNumberFilters,
                    numberOfFilters
                } },
                React.Children.map(children, (child) => {
                    if (React.isValidElement(child)) {
                        return React.cloneElement(child, {
                            clearAllFilters,
                            clearFiltersButtonText,
                            showClearFiltersButton,
                            isExpanded: isToggleManaged ? isManagedToggleExpanded : isExpanded,
                            toolbarId: id
                        });
                    }
                    else {
                        return child;
                    }
                }),
                React.createElement(DataToolbarChipGroupContent_1.DataToolbarChipGroupContent, { isExpanded: isToggleManaged ? isManagedToggleExpanded : isExpanded, chipGroupContentRef: this.chipGroupContentRef, clearAllFilters: clearAllFilters, showClearFiltersButton: showClearFiltersButton, clearFiltersButtonText: clearFiltersButtonText, numberOfFilters: numberOfFilters, collapseListedFiltersBreakpoint: collapseListedFiltersBreakpoint }))));
    }
}
exports.DataToolbar = DataToolbar;
DataToolbar.hasWarnBeta = false;
//# sourceMappingURL=DataToolbar.js.map