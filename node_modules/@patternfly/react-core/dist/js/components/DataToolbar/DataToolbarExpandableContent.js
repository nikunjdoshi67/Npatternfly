"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const React = tslib_1.__importStar(require("react"));
const data_toolbar_1 = tslib_1.__importDefault(require("@patternfly/react-styles/css/components/DataToolbar/data-toolbar"));
const react_styles_1 = require("@patternfly/react-styles");
const DataToolbarGroup_1 = require("./DataToolbarGroup");
const DataToolbarItem_1 = require("./DataToolbarItem");
const Button_1 = require("../../components/Button");
const DataToolbarUtils_1 = require("./DataToolbarUtils");
class DataToolbarExpandableContent extends React.Component {
    render() {
        const _a = this.props, { className, expandableContentRef, chipContainerRef, 
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        isExpanded, clearAllFilters, clearFiltersButtonText, showClearFiltersButton } = _a, props = tslib_1.__rest(_a, ["className", "expandableContentRef", "chipContainerRef", "isExpanded", "clearAllFilters", "clearFiltersButtonText", "showClearFiltersButton"]);
        const { numberOfFilters } = this.context;
        const clearChipGroups = () => {
            clearAllFilters();
        };
        return (React.createElement("div", Object.assign({ className: react_styles_1.css(data_toolbar_1.default.dataToolbarExpandableContent, className), ref: expandableContentRef }, props),
            React.createElement(DataToolbarGroup_1.DataToolbarGroup, null),
            numberOfFilters > 0 && (React.createElement(DataToolbarGroup_1.DataToolbarGroup, { className: data_toolbar_1.default.modifiers.chipContainer },
                React.createElement(DataToolbarGroup_1.DataToolbarGroup, { ref: chipContainerRef }),
                showClearFiltersButton && (React.createElement(DataToolbarItem_1.DataToolbarItem, null,
                    React.createElement(Button_1.Button, { variant: "link", onClick: clearChipGroups, isInline: true }, clearFiltersButtonText)))))));
    }
}
exports.DataToolbarExpandableContent = DataToolbarExpandableContent;
DataToolbarExpandableContent.contextType = DataToolbarUtils_1.DataToolbarContext;
DataToolbarExpandableContent.defaultProps = {
    isExpanded: false,
    clearFiltersButtonText: 'Clear all filters'
};
//# sourceMappingURL=DataToolbarExpandableContent.js.map