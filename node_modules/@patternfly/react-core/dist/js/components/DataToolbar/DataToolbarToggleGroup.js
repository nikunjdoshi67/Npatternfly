"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const React = tslib_1.__importStar(require("react"));
const ReactDOM = tslib_1.__importStar(require("react-dom"));
const data_toolbar_1 = tslib_1.__importDefault(require("@patternfly/react-styles/css/components/DataToolbar/data-toolbar"));
const react_styles_1 = require("@patternfly/react-styles");
const DataToolbarUtils_1 = require("./DataToolbarUtils");
const Button_1 = require("../../components/Button");
const global_breakpoint_lg_1 = tslib_1.__importDefault(require("@patternfly/react-tokens/dist/js/global_breakpoint_lg"));
const util_1 = require("../../helpers/util");
class DataToolbarToggleGroup extends React.Component {
    constructor() {
        super(...arguments);
        this.isContentPopup = () => {
            const viewportSize = window.innerWidth;
            const lgBreakpointValue = parseInt(global_breakpoint_lg_1.default.value);
            return viewportSize < lgBreakpointValue;
        };
    }
    render() {
        const _a = this.props, { toggleIcon, breakpoint, variant, breakpointMods, className, children } = _a, props = tslib_1.__rest(_a, ["toggleIcon", "breakpoint", "variant", "breakpointMods", "className", "children"]);
        return (React.createElement(DataToolbarUtils_1.DataToolbarContext.Consumer, null, ({ isExpanded, toggleIsExpanded }) => (React.createElement(DataToolbarUtils_1.DataToolbarContentContext.Consumer, null, ({ expandableContentRef, expandableContentId }) => {
            if (expandableContentRef.current && expandableContentRef.current.classList) {
                if (isExpanded) {
                    expandableContentRef.current.classList.add(data_toolbar_1.default.modifiers.expanded);
                }
                else {
                    expandableContentRef.current.classList.remove(data_toolbar_1.default.modifiers.expanded);
                }
            }
            return (React.createElement("div", Object.assign({ className: react_styles_1.css(data_toolbar_1.default.dataToolbarGroup, variant && data_toolbar_1.default.modifiers[util_1.toCamel(variant)], util_1.formatBreakpointMods(breakpointMods, data_toolbar_1.default), data_toolbar_1.default.modifiers.toggleGroup, data_toolbar_1.default.modifiers[`showOn${util_1.capitalize(breakpoint)}`], className) }, props),
                React.createElement("div", { className: react_styles_1.css(data_toolbar_1.default.dataToolbarToggle) },
                    React.createElement(Button_1.Button, Object.assign({ variant: "plain", onClick: toggleIsExpanded, "aria-label": "Show Filters" }, (isExpanded && { 'aria-expanded': true }), { "aria-haspopup": isExpanded && this.isContentPopup(), "aria-controls": expandableContentId }), toggleIcon)),
                isExpanded
                    ? ReactDOM.createPortal(children, expandableContentRef.current.firstElementChild)
                    : children));
        }))));
    }
}
exports.DataToolbarToggleGroup = DataToolbarToggleGroup;
DataToolbarToggleGroup.defaultProps = {
    breakpointMods: []
};
//# sourceMappingURL=DataToolbarToggleGroup.js.map