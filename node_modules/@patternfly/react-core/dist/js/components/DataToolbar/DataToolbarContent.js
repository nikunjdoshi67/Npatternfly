"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const React = tslib_1.__importStar(require("react"));
const data_toolbar_1 = tslib_1.__importDefault(require("@patternfly/react-styles/css/components/DataToolbar/data-toolbar"));
const react_styles_1 = require("@patternfly/react-styles");
const DataToolbarUtils_1 = require("./DataToolbarUtils");
const util_1 = require("../../helpers/util");
const DataToolbarExpandableContent_1 = require("./DataToolbarExpandableContent");
class DataToolbarContent extends React.Component {
    constructor() {
        super(...arguments);
        this.expandableContentRef = React.createRef();
        this.chipContainerRef = React.createRef();
    }
    render() {
        const _a = this.props, { className, children, isExpanded, toolbarId, breakpointMods, clearAllFilters, showClearFiltersButton, clearFiltersButtonText } = _a, props = tslib_1.__rest(_a, ["className", "children", "isExpanded", "toolbarId", "breakpointMods", "clearAllFilters", "showClearFiltersButton", "clearFiltersButtonText"]);
        const expandableContentId = `${toolbarId}-expandable-content-${DataToolbarContent.currentId++}`;
        return (React.createElement("div", Object.assign({ className: react_styles_1.css(data_toolbar_1.default.dataToolbarContent, util_1.formatBreakpointMods(breakpointMods, data_toolbar_1.default), className) }, props),
            React.createElement(DataToolbarUtils_1.DataToolbarContentContext.Provider, { value: {
                    expandableContentRef: this.expandableContentRef,
                    expandableContentId,
                    chipContainerRef: this.chipContainerRef
                } },
                React.createElement("div", { className: react_styles_1.css(data_toolbar_1.default.dataToolbarContentSection) }, children),
                React.createElement(DataToolbarExpandableContent_1.DataToolbarExpandableContent, { id: expandableContentId, isExpanded: isExpanded, expandableContentRef: this.expandableContentRef, chipContainerRef: this.chipContainerRef, clearAllFilters: clearAllFilters, showClearFiltersButton: showClearFiltersButton, clearFiltersButtonText: clearFiltersButtonText }))));
    }
}
exports.DataToolbarContent = DataToolbarContent;
DataToolbarContent.currentId = 0;
DataToolbarContent.defaultProps = {
    isExpanded: false,
    breakpointMods: [],
    showClearFiltersButton: false
};
//# sourceMappingURL=DataToolbarContent.js.map