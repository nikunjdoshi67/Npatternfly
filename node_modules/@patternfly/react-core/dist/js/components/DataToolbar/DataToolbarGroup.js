"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const React = tslib_1.__importStar(require("react"));
const data_toolbar_1 = tslib_1.__importDefault(require("@patternfly/react-styles/css/components/DataToolbar/data-toolbar"));
const react_styles_1 = require("@patternfly/react-styles");
const util_1 = require("../../helpers/util");
var DataToolbarGroupVariant;
(function (DataToolbarGroupVariant) {
    DataToolbarGroupVariant["filter-group"] = "filter-group";
    DataToolbarGroupVariant["icon-button-group"] = "icon-button-group";
    DataToolbarGroupVariant["button-group"] = "button-group";
})(DataToolbarGroupVariant = exports.DataToolbarGroupVariant || (exports.DataToolbarGroupVariant = {}));
class DataToolbarGroupWithRef extends React.Component {
    render() {
        const _a = this.props, { breakpointMods, className, variant, children, innerRef } = _a, props = tslib_1.__rest(_a, ["breakpointMods", "className", "variant", "children", "innerRef"]);
        return (React.createElement("div", Object.assign({ className: react_styles_1.css(data_toolbar_1.default.dataToolbarGroup, variant && data_toolbar_1.default.modifiers[util_1.toCamel(variant)], util_1.formatBreakpointMods(breakpointMods, data_toolbar_1.default), className) }, props, { ref: innerRef }), children));
    }
}
DataToolbarGroupWithRef.defaultProps = {
    breakpointMods: []
};
exports.DataToolbarGroup = React.forwardRef((props, ref) => (React.createElement(DataToolbarGroupWithRef, Object.assign({}, props, { innerRef: ref }))));
//# sourceMappingURL=DataToolbarGroup.js.map