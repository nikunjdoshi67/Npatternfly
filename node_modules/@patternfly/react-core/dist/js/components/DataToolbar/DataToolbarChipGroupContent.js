"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const React = tslib_1.__importStar(require("react"));
const data_toolbar_1 = tslib_1.__importDefault(require("@patternfly/react-styles/css/components/DataToolbar/data-toolbar"));
const react_styles_1 = require("@patternfly/react-styles");
const DataToolbarItem_1 = require("./DataToolbarItem");
const Button_1 = require("../../components/Button");
const DataToolbarGroup_1 = require("./DataToolbarGroup");
const DataToolbarUtils_1 = require("./DataToolbarUtils");
class DataToolbarChipGroupContent extends React.Component {
    render() {
        const _a = this.props, { className, isExpanded, chipGroupContentRef, clearAllFilters, showClearFiltersButton, clearFiltersButtonText, collapseListedFiltersBreakpoint, numberOfFilters } = _a, props = tslib_1.__rest(_a, ["className", "isExpanded", "chipGroupContentRef", "clearAllFilters", "showClearFiltersButton", "clearFiltersButtonText", "collapseListedFiltersBreakpoint", "numberOfFilters"]);
        const clearChipGroups = () => {
            clearAllFilters();
        };
        const collapseListedFilters = typeof window !== 'undefined' ? window.innerWidth < DataToolbarUtils_1.globalBreakpoints(collapseListedFiltersBreakpoint) : false;
        return (React.createElement("div", Object.assign({ className: react_styles_1.css(data_toolbar_1.default.dataToolbarContent, (numberOfFilters === 0 || isExpanded) && data_toolbar_1.default.modifiers.hidden, className) }, ((numberOfFilters === 0 || isExpanded) && { hidden: true }), { ref: chipGroupContentRef }, props),
            React.createElement(DataToolbarGroup_1.DataToolbarGroup, Object.assign({ className: react_styles_1.css(collapseListedFilters && data_toolbar_1.default.modifiers.hidden) }, (collapseListedFilters && { hidden: true }), (collapseListedFilters && { 'aria-hidden': true }))),
            collapseListedFilters && numberOfFilters > 0 && !isExpanded && (React.createElement(DataToolbarGroup_1.DataToolbarGroup, null,
                React.createElement(DataToolbarItem_1.DataToolbarItem, null,
                    numberOfFilters,
                    " filters applied"))),
            showClearFiltersButton && !isExpanded && (React.createElement(DataToolbarItem_1.DataToolbarItem, null,
                React.createElement(Button_1.Button, { variant: "link", onClick: clearChipGroups, isInline: true }, clearFiltersButtonText)))));
    }
}
exports.DataToolbarChipGroupContent = DataToolbarChipGroupContent;
DataToolbarChipGroupContent.defaultProps = {
    clearFiltersButtonText: 'Clear all filters',
    collapseListedFiltersBreakpoint: 'lg'
};
//# sourceMappingURL=DataToolbarChipGroupContent.js.map