"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const React = tslib_1.__importStar(require("react"));
const ReactDOM = tslib_1.__importStar(require("react-dom"));
const DataToolbarItem_1 = require("./DataToolbarItem");
const ChipGroup_1 = require("../../components/ChipGroup");
const DataToolbarUtils_1 = require("./DataToolbarUtils");
class DataToolbarFilter extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            isMounted: false
        };
    }
    componentDidMount() {
        const { categoryName, chips } = this.props;
        this.context.updateNumberFilters(typeof categoryName === 'string' ? categoryName : categoryName.name, chips.length);
        this.setState({ isMounted: true });
    }
    componentDidUpdate() {
        const { categoryName, chips } = this.props;
        this.context.updateNumberFilters(typeof categoryName === 'string' ? categoryName : categoryName.name, chips.length);
    }
    render() {
        const _a = this.props, { children, chips, deleteChip, categoryName, showToolbarItem } = _a, props = tslib_1.__rest(_a, ["children", "chips", "deleteChip", "categoryName", "showToolbarItem"]);
        const { isExpanded, chipGroupContentRef } = this.context;
        const chipGroup = chips.length ? (React.createElement(DataToolbarItem_1.DataToolbarItem, { variant: "chip-group" },
            React.createElement(ChipGroup_1.ChipGroup, { withToolbar: true },
                React.createElement(ChipGroup_1.ChipGroupToolbarItem, { key: typeof categoryName === 'string' ? categoryName : categoryName.key, categoryName: typeof categoryName === 'string' ? categoryName : categoryName.name }, chips.map(chip => typeof chip === 'string' ? (React.createElement(ChipGroup_1.Chip, { key: chip, onClick: () => deleteChip(categoryName, chip) }, chip)) : (React.createElement(ChipGroup_1.Chip, { key: chip.key, onClick: () => deleteChip(categoryName, chip) }, chip.node))))))) : null;
        if (!isExpanded && this.state.isMounted) {
            return (React.createElement(React.Fragment, null,
                showToolbarItem && React.createElement(DataToolbarItem_1.DataToolbarItem, Object.assign({}, props), children),
                ReactDOM.createPortal(chipGroup, chipGroupContentRef.current.firstElementChild)));
        }
        return (React.createElement(DataToolbarUtils_1.DataToolbarContentContext.Consumer, null, ({ chipContainerRef }) => (React.createElement(React.Fragment, null,
            showToolbarItem && React.createElement(DataToolbarItem_1.DataToolbarItem, Object.assign({}, props), children),
            chipContainerRef.current && ReactDOM.createPortal(chipGroup, chipContainerRef.current)))));
    }
}
exports.DataToolbarFilter = DataToolbarFilter;
DataToolbarFilter.contextType = DataToolbarUtils_1.DataToolbarContext;
DataToolbarFilter.defaultProps = {
    chips: [],
    showToolbarItem: true
};
//# sourceMappingURL=DataToolbarFilter.js.map