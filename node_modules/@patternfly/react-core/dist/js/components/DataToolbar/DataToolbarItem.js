"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const React = tslib_1.__importStar(require("react"));
const data_toolbar_1 = tslib_1.__importDefault(require("@patternfly/react-styles/css/components/DataToolbar/data-toolbar"));
const react_styles_1 = require("@patternfly/react-styles");
const util_1 = require("../../helpers/util");
var DataToolbarItemVariant;
(function (DataToolbarItemVariant) {
    DataToolbarItemVariant["separator"] = "separator";
    DataToolbarItemVariant["bulk-select"] = "bulk-select";
    DataToolbarItemVariant["overflow-menu"] = "overflow-menu";
    DataToolbarItemVariant["pagination"] = "pagination";
    DataToolbarItemVariant["search-filter"] = "search-filter";
    DataToolbarItemVariant["label"] = "label";
    DataToolbarItemVariant["chip-group"] = "chip-group";
})(DataToolbarItemVariant = exports.DataToolbarItemVariant || (exports.DataToolbarItemVariant = {}));
exports.DataToolbarItem = (_a) => {
    var { className, variant, breakpointMods = [], id, children } = _a, props = tslib_1.__rest(_a, ["className", "variant", "breakpointMods", "id", "children"]);
    const labelVariant = variant === 'label';
    return (React.createElement("div", Object.assign({ className: react_styles_1.css(data_toolbar_1.default.dataToolbarItem, variant &&
            data_toolbar_1.default.modifiers[util_1.toCamel(variant)], util_1.formatBreakpointMods(breakpointMods, data_toolbar_1.default), className) }, (labelVariant && { 'aria-hidden': true }), { id: id }, props), children));
};
//# sourceMappingURL=DataToolbarItem.js.map