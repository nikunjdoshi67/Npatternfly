import { __rest } from "tslib";
import * as React from 'react';
import * as ReactDOM from 'react-dom';
import styles from '@patternfly/react-styles/css/components/DataToolbar/data-toolbar';
import { css } from '@patternfly/react-styles';
import { DataToolbarContext, DataToolbarContentContext } from './DataToolbarUtils';
import { Button } from '../../components/Button';
import globalBreakpointLg from '@patternfly/react-tokens/dist/js/global_breakpoint_lg';
import { formatBreakpointMods, capitalize, toCamel } from '../../helpers/util';
export class DataToolbarToggleGroup extends React.Component {
    constructor() {
        super(...arguments);
        this.isContentPopup = () => {
            const viewportSize = window.innerWidth;
            const lgBreakpointValue = parseInt(globalBreakpointLg.value);
            return viewportSize < lgBreakpointValue;
        };
    }
    render() {
        const _a = this.props, { toggleIcon, breakpoint, variant, breakpointMods, className, children } = _a, props = __rest(_a, ["toggleIcon", "breakpoint", "variant", "breakpointMods", "className", "children"]);
        return (React.createElement(DataToolbarContext.Consumer, null, ({ isExpanded, toggleIsExpanded }) => (React.createElement(DataToolbarContentContext.Consumer, null, ({ expandableContentRef, expandableContentId }) => {
            if (expandableContentRef.current && expandableContentRef.current.classList) {
                if (isExpanded) {
                    expandableContentRef.current.classList.add(styles.modifiers.expanded);
                }
                else {
                    expandableContentRef.current.classList.remove(styles.modifiers.expanded);
                }
            }
            return (React.createElement("div", Object.assign({ className: css(styles.dataToolbarGroup, variant && styles.modifiers[toCamel(variant)], formatBreakpointMods(breakpointMods, styles), styles.modifiers.toggleGroup, styles.modifiers[`showOn${capitalize(breakpoint)}`], className) }, props),
                React.createElement("div", { className: css(styles.dataToolbarToggle) },
                    React.createElement(Button, Object.assign({ variant: "plain", onClick: toggleIsExpanded, "aria-label": "Show Filters" }, (isExpanded && { 'aria-expanded': true }), { "aria-haspopup": isExpanded && this.isContentPopup(), "aria-controls": expandableContentId }), toggleIcon)),
                isExpanded
                    ? ReactDOM.createPortal(children, expandableContentRef.current.firstElementChild)
                    : children));
        }))));
    }
}
DataToolbarToggleGroup.defaultProps = {
    breakpointMods: []
};
//# sourceMappingURL=DataToolbarToggleGroup.js.map