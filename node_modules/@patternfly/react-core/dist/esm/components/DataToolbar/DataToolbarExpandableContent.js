import { __rest } from "tslib";
import * as React from 'react';
import styles from '@patternfly/react-styles/css/components/DataToolbar/data-toolbar';
import { css } from '@patternfly/react-styles';
import { DataToolbarGroup } from './DataToolbarGroup';
import { DataToolbarItem } from './DataToolbarItem';
import { Button } from '../../components/Button';
import { DataToolbarContext } from './DataToolbarUtils';
export class DataToolbarExpandableContent extends React.Component {
    render() {
        const _a = this.props, { className, expandableContentRef, chipContainerRef, 
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        isExpanded, clearAllFilters, clearFiltersButtonText, showClearFiltersButton } = _a, props = __rest(_a, ["className", "expandableContentRef", "chipContainerRef", "isExpanded", "clearAllFilters", "clearFiltersButtonText", "showClearFiltersButton"]);
        const { numberOfFilters } = this.context;
        const clearChipGroups = () => {
            clearAllFilters();
        };
        return (React.createElement("div", Object.assign({ className: css(styles.dataToolbarExpandableContent, className), ref: expandableContentRef }, props),
            React.createElement(DataToolbarGroup, null),
            numberOfFilters > 0 && (React.createElement(DataToolbarGroup, { className: styles.modifiers.chipContainer },
                React.createElement(DataToolbarGroup, { ref: chipContainerRef }),
                showClearFiltersButton && (React.createElement(DataToolbarItem, null,
                    React.createElement(Button, { variant: "link", onClick: clearChipGroups, isInline: true }, clearFiltersButtonText)))))));
    }
}
DataToolbarExpandableContent.contextType = DataToolbarContext;
DataToolbarExpandableContent.defaultProps = {
    isExpanded: false,
    clearFiltersButtonText: 'Clear all filters'
};
//# sourceMappingURL=DataToolbarExpandableContent.js.map