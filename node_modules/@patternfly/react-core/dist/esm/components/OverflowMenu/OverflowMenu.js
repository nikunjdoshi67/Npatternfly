import { __rest } from "tslib";
import * as React from 'react';
import styles from '@patternfly/react-styles/css/components/OverflowMenu/overflow-menu';
import { css } from '@patternfly/react-styles';
import { OverflowMenuContext } from './OverflowMenuContext';
/* eslint-disable camelcase */
import global_breakpoint_md from '@patternfly/react-tokens/dist/js/global_breakpoint_md';
import global_breakpoint_lg from '@patternfly/react-tokens/dist/js/global_breakpoint_lg';
import global_breakpoint_xl from '@patternfly/react-tokens/dist/js/global_breakpoint_xl';
/* eslint-enable camelcase */
import { debounce } from '../../helpers/util';
export class OverflowMenu extends React.Component {
    constructor(props) {
        super(props);
        this.handleResize = () => {
            const breakpoints = {
                /* eslint-disable camelcase */
                md: global_breakpoint_md,
                lg: global_breakpoint_lg,
                xl: global_breakpoint_xl
                /* eslint-enable camelcase */
            };
            const { breakpoint } = this.props;
            let breakpointWidth = breakpoints[breakpoint].value;
            breakpointWidth = Number(breakpointWidth.split('px')[0]);
            const isBelowBreakpoint = window.innerWidth < breakpointWidth;
            this.state.isBelowBreakpoint !== isBelowBreakpoint && this.setState({ isBelowBreakpoint });
        };
        this.state = {
            isBelowBreakpoint: false
        };
    }
    componentDidMount() {
        this.handleResize();
        window.addEventListener('resize', debounce(this.handleResize, 250));
    }
    componentWillUnmount() {
        window.removeEventListener('resize', debounce(this.handleResize, 250));
    }
    render() {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const _a = this.props, { className, breakpoint, children } = _a, props = __rest(_a, ["className", "breakpoint", "children"]);
        return (React.createElement("div", Object.assign({}, props, { className: css(styles.overflowMenu, className) }),
            React.createElement(OverflowMenuContext.Provider, { value: { isBelowBreakpoint: this.state.isBelowBreakpoint } }, children)));
    }
}
OverflowMenu.contextType = OverflowMenuContext;
//# sourceMappingURL=OverflowMenu.js.map