import { __rest } from "tslib";
import * as React from 'react';
import * as ReactDOM from 'react-dom';
import { canUseDOM, KEY_CODES } from '../../helpers';
import { css } from '@patternfly/react-styles';
import styles from '@patternfly/react-styles/css/components/Backdrop/backdrop';
import { ModalContent } from './ModalContent';
export var ModalVariant;
(function (ModalVariant) {
    ModalVariant["small"] = "small";
    ModalVariant["large"] = "large";
    ModalVariant["default"] = "default";
})(ModalVariant || (ModalVariant = {}));
export class Modal extends React.Component {
    constructor(props) {
        super(props);
        this.id = '';
        this.handleEscKeyClick = (event) => {
            if (event.keyCode === KEY_CODES.ESCAPE_KEY && this.props.isOpen) {
                this.props.onClose();
            }
        };
        this.getElement = (appendTo) => {
            let target;
            if (typeof appendTo === 'function') {
                target = appendTo();
            }
            else {
                target = appendTo;
            }
            return target;
        };
        this.toggleSiblingsFromScreenReaders = (hide) => {
            const { appendTo } = this.props;
            const target = this.getElement(appendTo);
            const bodyChildren = target.children;
            for (const child of Array.from(bodyChildren)) {
                if (child !== this.state.container) {
                    hide ? child.setAttribute('aria-hidden', '' + hide) : child.removeAttribute('aria-hidden');
                }
            }
        };
        const newId = Modal.currentId++;
        this.id = `pf-modal-${newId}`;
        this.state = {
            container: undefined
        };
    }
    componentDidMount() {
        const { appendTo } = this.props;
        const target = this.getElement(appendTo);
        const container = document.createElement('div');
        this.setState({ container });
        target.appendChild(container);
        target.addEventListener('keydown', this.handleEscKeyClick, false);
        if (this.props.isOpen) {
            target.classList.add(css(styles.backdropOpen));
        }
        else {
            target.classList.remove(css(styles.backdropOpen));
        }
    }
    componentDidUpdate() {
        const { appendTo } = this.props;
        const target = this.getElement(appendTo);
        if (this.props.isOpen) {
            target.classList.add(css(styles.backdropOpen));
            this.toggleSiblingsFromScreenReaders(true);
        }
        else {
            target.classList.remove(css(styles.backdropOpen));
            this.toggleSiblingsFromScreenReaders(false);
        }
    }
    componentWillUnmount() {
        const { appendTo } = this.props;
        const target = this.getElement(appendTo);
        if (this.state.container) {
            target.removeChild(this.state.container);
        }
        target.removeEventListener('keydown', this.handleEscKeyClick, false);
        target.classList.remove(css(styles.backdropOpen));
    }
    render() {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const _a = this.props, { appendTo, modalContentAriaDescribedById } = _a, props = __rest(_a, ["appendTo", "modalContentAriaDescribedById"]);
        const { container } = this.state;
        if (!canUseDOM || !container) {
            return null;
        }
        return ReactDOM.createPortal(React.createElement(ModalContent, Object.assign({}, props, { title: this.props.title, id: this.id, modalBoxAriaDescribedById: modalContentAriaDescribedById })), container);
    }
}
Modal.currentId = 0;
Modal.defaultProps = {
    className: '',
    isOpen: false,
    hideTitle: false,
    showClose: true,
    modalContentAriaDescribedById: '',
    actions: [],
    onClose: () => undefined,
    variant: 'default',
    appendTo: (typeof document !== 'undefined' && document.body) || null
};
//# sourceMappingURL=Modal.js.map