import { __rest } from "tslib";
import * as React from 'react';
import { FocusTrap } from '../../helpers';
import titleStyles from '@patternfly/react-styles/css/components/Title/title';
import styles from '@patternfly/react-styles/css/layouts/Bullseye/bullseye';
import { css } from '@patternfly/react-styles';
import { Backdrop } from '../Backdrop/Backdrop';
import { ModalBoxBody } from './ModalBoxBody';
import { ModalBoxHeader } from './ModalBoxHeader';
import { ModalBoxCloseButton } from './ModalBoxCloseButton';
import { ModalBox } from './ModalBox';
import { ModalBoxFooter } from './ModalBoxFooter';
import { ModalBoxDescription } from './ModalBoxDescription';
export const ModalContent = (_a) => {
    var { children, className = '', isOpen = false, header = null, description = null, title, hideTitle = false, showClose = true, footer = null, actions = [], onClose = () => undefined, variant = 'default', width = -1, modalBoxAriaDescribedById = '', id = '', disableFocusTrap = false } = _a, props = __rest(_a, ["children", "className", "isOpen", "header", "description", "title", "hideTitle", "showClose", "footer", "actions", "onClose", "variant", "width", "modalBoxAriaDescribedById", "id", "disableFocusTrap"]);
    if (!isOpen) {
        return null;
    }
    const modalBoxHeader = header ? (React.createElement("div", { className: css(titleStyles.title) }, header)) : (React.createElement(ModalBoxHeader, { hideTitle: hideTitle },
        " ",
        title,
        " "));
    const modalBoxFooter = footer ? (React.createElement(ModalBoxFooter, null, footer)) : (actions.length > 0 && React.createElement(ModalBoxFooter, null, actions));
    const boxStyle = width === -1 ? {} : { width };
    const modalBox = (React.createElement(ModalBox, { style: boxStyle, className: className, variant: variant, title: title, id: modalBoxAriaDescribedById || id },
        showClose && React.createElement(ModalBoxCloseButton, { onClose: onClose }),
        modalBoxHeader,
        description && React.createElement(ModalBoxDescription, { id: id }, description),
        React.createElement(ModalBoxBody, Object.assign({}, props, (!description && { id })), children),
        modalBoxFooter));
    return (React.createElement(Backdrop, null,
        React.createElement(FocusTrap, { active: !disableFocusTrap, focusTrapOptions: { clickOutsideDeactivates: true }, className: css(styles.bullseye) }, modalBox)));
};
//# sourceMappingURL=ModalContent.js.map