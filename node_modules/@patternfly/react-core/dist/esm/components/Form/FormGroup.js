import { __rest } from "tslib";
import * as React from 'react';
import styles from '@patternfly/react-styles/css/components/Form/form';
import { ASTERISK } from '../../helpers/htmlConstants';
import { FormContext } from './FormContext';
import { css } from '@patternfly/react-styles';
import { ValidatedOptions } from '../../helpers/constants';
export const FormGroup = (_a) => {
    var { children = null, className = '', label, isRequired = false, validated = 'default', isInline = false, helperText, helperTextInvalid, fieldId } = _a, props = __rest(_a, ["children", "className", "label", "isRequired", "validated", "isInline", "helperText", "helperTextInvalid", "fieldId"]);
    const validHelperText = (React.createElement("div", { className: css(styles.formHelperText, validated === ValidatedOptions.success && styles.modifiers.success), id: `${fieldId}-helper`, "aria-live": "polite" }, helperText));
    const inValidHelperText = (React.createElement("div", { className: css(styles.formHelperText, styles.modifiers.error), id: `${fieldId}-helper`, "aria-live": "polite" }, helperTextInvalid));
    return (React.createElement(FormContext.Consumer, null, ({ isHorizontal }) => (React.createElement("div", Object.assign({}, props, { className: css(styles.formGroup, isInline ? styles.modifiers.inline : className) }),
        label && (React.createElement("label", { className: css(styles.formLabel), htmlFor: fieldId },
            React.createElement("span", { className: css(styles.formLabelText) }, label),
            isRequired && (React.createElement("span", { className: css(styles.formLabelRequired), "aria-hidden": "true" }, ASTERISK)))),
        isHorizontal ? React.createElement("div", { className: css(styles.formHorizontalGroup) }, children) : children,
        validated === ValidatedOptions.error && helperTextInvalid
            ? inValidHelperText
            : validated !== ValidatedOptions.error && helperText
                ? validHelperText
                : ''))));
};
//# sourceMappingURL=FormGroup.js.map