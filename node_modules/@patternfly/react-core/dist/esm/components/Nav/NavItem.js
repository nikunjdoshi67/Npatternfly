import { __rest } from "tslib";
import * as React from 'react';
import styles from '@patternfly/react-styles/css/components/Nav/nav';
import { css } from '@patternfly/react-styles';
import { NavContext } from './Nav';
export const NavItem = (_a) => {
    var { children = null, className = '', to = '', isActive = false, groupId = null, itemId = null, preventDefault = false, onClick = null, component = 'a' } = _a, props = __rest(_a, ["children", "className", "to", "isActive", "groupId", "itemId", "preventDefault", "onClick", "component"]);
    const Component = component;
    const renderDefaultLink = () => {
        const preventLinkDefault = preventDefault || !to;
        return (React.createElement(NavContext.Consumer, null, (context) => (React.createElement(Component, Object.assign({ href: to, onClick: (e) => context.onSelect(e, groupId, itemId, to, preventLinkDefault, onClick), className: css(styles.navLink, isActive && styles.modifiers.current, className), "aria-current": isActive ? 'page' : null }, props), children))));
    };
    const renderClonedChild = (child) => (React.createElement(NavContext.Consumer, null, (context) => React.cloneElement(child, {
        onClick: (e) => context.onSelect(e, groupId, itemId, to, preventDefault, onClick),
        className: css(styles.navLink, isActive && styles.modifiers.current, child.props && child.props.className),
        'aria-current': isActive ? 'page' : null
    })));
    return (React.createElement("li", { className: css(styles.navItem, className) }, React.isValidElement(children) ? renderClonedChild(children) : renderDefaultLink()));
};
//# sourceMappingURL=NavItem.js.map