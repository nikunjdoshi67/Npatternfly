import { __rest } from "tslib";
import * as React from 'react';
import styles from '@patternfly/react-styles/css/components/Nav/nav';
import { css } from '@patternfly/react-styles';
import { getOUIAProps } from '../../helpers';
export const NavContext = React.createContext({});
export class Nav extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            showLeftScrollButton: false,
            showRightScrollButton: false
        };
        this.updateScrollButtonState = (state) => {
            const { showLeftScrollButton, showRightScrollButton } = state;
            this.setState({
                showLeftScrollButton,
                showRightScrollButton
            });
        };
    }
    // Callback from NavItem
    onSelect(event, groupId, itemId, to, preventDefault, onClick) {
        if (preventDefault) {
            event.preventDefault();
        }
        this.props.onSelect({ groupId, itemId, event, to });
        if (onClick) {
            onClick(event, itemId, groupId, to);
        }
    }
    // Callback from NavExpandable
    onToggle(event, groupId, toggleValue) {
        this.props.onToggle({
            event,
            groupId,
            isExpanded: toggleValue
        });
    }
    render() {
        const _a = this.props, { 'aria-label': ariaLabel, children, className, 
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        onSelect, 
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        onToggle, theme, ouiaId } = _a, props = __rest(_a, ['aria-label', "children", "className", "onSelect", "onToggle", "theme", "ouiaId"]);
        const { showLeftScrollButton, showRightScrollButton } = this.state;
        const childrenProps = children.props;
        return (React.createElement(NavContext.Provider, { value: {
                onSelect: (event, groupId, itemId, to, preventDefault, onClick) => this.onSelect(event, groupId, itemId, to, preventDefault, onClick),
                onToggle: (event, groupId, expanded) => this.onToggle(event, groupId, expanded),
                updateScrollButtonState: this.updateScrollButtonState
            } },
            React.createElement("nav", Object.assign({ className: css(styles.nav, theme === 'dark' && styles.modifiers.dark, showLeftScrollButton && styles.modifiers.start, showRightScrollButton && styles.modifiers.end, className), "aria-label": ariaLabel === ''
                    ? typeof childrenProps !== 'undefined' && childrenProps.variant === 'tertiary'
                        ? 'Local'
                        : 'Global'
                    : ariaLabel }, getOUIAProps('Nav', ouiaId), props), children)));
    }
}
Nav.defaultProps = {
    'aria-label': '',
    children: null,
    className: '',
    onSelect: () => undefined,
    onToggle: () => undefined,
    theme: 'light'
};
//# sourceMappingURL=Nav.js.map