import { __rest } from "tslib";
import * as React from 'react';
import { css } from '@patternfly/react-styles';
import styles from '@patternfly/react-styles/css/components/ChipGroup/chip-group';
import { ChipGroupContext } from './ChipGroup';
import { ChipButton } from './ChipButton';
import { Tooltip } from '../Tooltip';
import TimesIcon from '@patternfly/react-icons/dist/js/icons/times-icon';
import { GenerateId } from '../../helpers/GenerateId/GenerateId';
export class ChipGroupToolbarItem extends React.Component {
    constructor(props) {
        super(props);
        this.heading = React.createRef();
        this.state = {
            isTooltipVisible: false
        };
    }
    componentDidMount() {
        this.setState({
            isTooltipVisible: Boolean(this.heading.current && this.heading.current.offsetWidth < this.heading.current.scrollWidth)
        });
    }
    render() {
        const _a = this.props, { categoryName, children, className, isClosable, closeBtnAriaLabel, onClick, tooltipPosition } = _a, rest = __rest(_a, ["categoryName", "children", "className", "isClosable", "closeBtnAriaLabel", "onClick", "tooltipPosition"]);
        if (React.Children.count(children)) {
            const renderChipGroup = (id, HeadingLevel) => (React.createElement("ul", Object.assign({ className: css(styles.chipGroup, styles.modifiers.toolbar, className) }, rest),
                React.createElement("li", null,
                    this.state.isTooltipVisible ? (React.createElement(Tooltip, { position: tooltipPosition, content: categoryName },
                        React.createElement(HeadingLevel, { tabIndex: "0", ref: this.heading, className: css(styles.chipGroupLabel), id: id }, categoryName))) : (React.createElement(HeadingLevel, { ref: this.heading, className: css(styles.chipGroupLabel), id: id }, categoryName)),
                    React.createElement("ul", { className: css(styles.chipGroup) }, children),
                    isClosable && (React.createElement("div", { className: "pf-c-chip-group__close" },
                        React.createElement(ChipButton, { "aria-label": closeBtnAriaLabel, onClick: onClick, id: `remove_group_${id}`, "aria-labelledby": `remove_group_${id} ${id}` },
                            React.createElement(TimesIcon, { "aria-hidden": "true" })))))));
            return (React.createElement(ChipGroupContext.Consumer, null, (HeadingLevel) => React.createElement(GenerateId, null, randomId => renderChipGroup(randomId, HeadingLevel))));
        }
        return null;
    }
}
ChipGroupToolbarItem.defaultProps = {
    categoryName: '',
    children: null,
    className: '',
    isClosable: false,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onClick: (_e) => undefined,
    closeBtnAriaLabel: 'Close chip group',
    tooltipPosition: 'top'
};
//# sourceMappingURL=ChipGroupToolbarItem.js.map