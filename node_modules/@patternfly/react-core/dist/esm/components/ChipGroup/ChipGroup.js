import * as React from 'react';
import styles from '@patternfly/react-styles/css/components/ChipGroup/chip-group';
import { css } from '@patternfly/react-styles';
import { Chip } from './Chip';
import { fillTemplate } from '../../helpers';
export const ChipGroupContext = React.createContext('');
export class ChipGroup extends React.Component {
    constructor(props) {
        super(props);
        this.toggleCollapse = () => {
            this.setState(prevState => ({
                isOpen: !prevState.isOpen
            }));
        };
        this.state = {
            isOpen: this.props.defaultIsOpen
        };
    }
    renderToolbarGroup() {
        const { isOpen } = this.state;
        const { headingLevel = 'h4' } = this.props;
        return (React.createElement(ChipGroupContext.Provider, { value: headingLevel },
            React.createElement(InnerChipGroup, Object.assign({}, this.props, { isOpen: isOpen, onToggleCollapse: this.toggleCollapse }))));
    }
    renderChipGroup() {
        const { className } = this.props;
        const { isOpen } = this.state;
        return (React.createElement("ul", { className: css(styles.chipGroup, className) },
            React.createElement(InnerChipGroup, Object.assign({}, this.props, { isOpen: isOpen, onToggleCollapse: this.toggleCollapse }))));
    }
    render() {
        const { withToolbar, children } = this.props;
        if (React.Children.count(children)) {
            return withToolbar ? this.renderToolbarGroup() : this.renderChipGroup();
        }
        return null;
    }
}
ChipGroup.defaultProps = {
    className: '',
    expandedText: 'Show Less',
    collapsedText: '${remaining} more',
    withToolbar: false,
    defaultIsOpen: false,
    numChips: 3
};
const InnerChipGroup = (props) => {
    const { children, expandedText, isOpen, onToggleCollapse, collapsedText, withToolbar, numChips } = props;
    const collapsedTextResult = fillTemplate(collapsedText, {
        remaining: React.Children.count(children) - numChips
    });
    const mappedChildren = React.Children.map(children, c => {
        const child = c;
        if (withToolbar) {
            return React.cloneElement(child, {
                children: React.Children.toArray(child.props.children).map((chip) => React.cloneElement(chip, { component: 'li' }))
            });
        }
        return React.cloneElement(child, {
            component: 'li'
        });
    });
    return (React.createElement(React.Fragment, null,
        isOpen ? (React.createElement(React.Fragment, null, mappedChildren)) : (React.createElement(React.Fragment, null, mappedChildren.map((child, i) => {
            if (i < numChips) {
                return child;
            }
        }))),
        React.Children.count(children) > numChips && (React.createElement(Chip, { isOverflowChip: true, onClick: onToggleCollapse, component: withToolbar ? 'div' : 'li' }, isOpen ? expandedText : collapsedTextResult))));
};
//# sourceMappingURL=ChipGroup.js.map